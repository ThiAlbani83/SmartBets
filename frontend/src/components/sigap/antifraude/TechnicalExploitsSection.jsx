import React, { useState, useEffect } from "react";
import { Line, Bar } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
  TimeScale,
} from "chart.js";
import "chartjs-adapter-date-fns";
import { ptBR } from "date-fns/locale";

// Registrar componentes do ChartJS
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
  TimeScale
);

const TechnicalExploitsSection = ({ timeRange, isLoading }) => {
  const [responseTimeData, setResponseTimeData] = useState(null);
  const [errorLogsData, setErrorLogsData] = useState(null);
  const [errorTypeData, setErrorTypeData] = useState(null);
  const [selectedLog, setSelectedLog] = useState(null);
  const [exploitStats, setExploitStats] = useState({
    totalAttempts: 0,
    blockedAttempts: 0,
    vulnerabilitiesDetected: 0,
    criticalEvents: 0,
  });
  const [systemEvents, setSystemEvents] = useState([]);

  useEffect(() => {
    // Simular carregamento de dados
    setTimeout(() => {
      // Gerar dados para o gráfico de tempo de resposta vs eventos críticos
      const generateResponseTimeData = () => {
        const now = new Date();
        const data = [];
        const criticalEvents = [];

        // Gerar dados para as últimas 24 horas com intervalos de 30 minutos
        for (let i = 0; i < 48; i++) {
          const time = new Date(now.getTime() - (47 - i) * 30 * 60 * 1000);

          // Tempo de resposta base entre 100ms e 300ms
          let responseTime = Math.floor(Math.random() * 200) + 100;

          // Adicionar alguns picos de lentidão
          if (i === 12 || i === 28 || i === 42) {
            responseTime = Math.floor(Math.random() * 1500) + 1000;
            criticalEvents.push({
              time: time.toISOString(),
              responseTime,
              event:
                i === 12
                  ? "Tentativa de injeção SQL"
                  : i === 28
                  ? "Ataque DDoS detectado"
                  : "Manipulação de API detectada",
            });
          }

          // Adicionar alguns picos menores aleatórios
          if (Math.random() > 0.85) {
            responseTime = Math.floor(Math.random() * 500) + 500;
          }

          data.push({
            x: time.toISOString(),
            y: responseTime,
          });
        }

        return {
          datasets: [
            {
              label: "Tempo de Resposta (ms)",
              data: data,
              borderColor: "rgba(75, 192, 192, 1)",
              backgroundColor: "rgba(75, 192, 192, 0.2)",
              fill: true,
              tension: 0.4,
            },
          ],
          criticalEvents,
        };
      };

      // Gerar dados para o gráfico de barras de ocorrência por tipo de erro
      const generateErrorTypeData = () => {
        const errorTypes = [
          "Injeção SQL",
          "XSS",
          "Manipulação de API",
          "Ataque DDoS",
          "Bypass de Autenticação",
          "Manipulação de Cookies",
          "Race Condition",
          "Tentativa de Brute Force",
        ];

        const occurrences = errorTypes.map(
          () => Math.floor(Math.random() * 20) + 1
        );

        // Garantir que alguns tipos de erro sejam mais comuns
        occurrences[3] = Math.floor(Math.random() * 30) + 25; // DDoS mais comum
        occurrences[2] = Math.floor(Math.random() * 25) + 20; // Manipulação de API

        return {
          labels: errorTypes,
          datasets: [
            {
              label: "Ocorrências",
              data: occurrences,
              backgroundColor: [
                "rgba(255, 99, 132, 0.7)",
                "rgba(54, 162, 235, 0.7)",
                "rgba(255, 206, 86, 0.7)",
                "rgba(75, 192, 192, 0.7)",
                "rgba(153, 102, 255, 0.7)",
                "rgba(255, 159, 64, 0.7)",
                "rgba(199, 199, 199, 0.7)",
                "rgba(83, 102, 255, 0.7)",
              ],
              borderColor: [
                "rgba(255, 99, 132, 1)",
                "rgba(54, 162, 235, 1)",
                "rgba(255, 206, 86, 1)",
                "rgba(75, 192, 192, 1)",
                "rgba(153, 102, 255, 1)",
                "rgba(255, 159, 64, 1)",
                "rgba(199, 199, 199, 1)",
                "rgba(83, 102, 255, 1)",
              ],
              borderWidth: 1,
            },
          ],
        };
      };

      // Gerar logs de eventos de segurança
      const generateSecurityLogs = () => {
        const logTypes = [
          { type: "CRITICAL", color: "bg-red-100 text-red-800" },
          { type: "WARNING", color: "bg-yellow-100 text-yellow-800" },
          { type: "INFO", color: "bg-blue-100 text-blue-800" },
        ];

        const ipAddresses = [
          "192.168.1.45",
          "45.23.123.12",
          "78.34.56.123",
          "103.45.67.89",
          "212.34.56.78",
          "187.65.43.21",
        ];

        const eventMessages = [
          { message: "Tentativa de injeção SQL detectada", severity: 0 },
          {
            message: "Múltiplas requisições de API em curto período",
            severity: 0,
          },
          {
            message: "Tentativa de acesso não autorizado à API de odds",
            severity: 0,
          },
          { message: "Possível ataque DDoS em andamento", severity: 0 },
          {
            message: "Manipulação de parâmetros de aposta detectada",
            severity: 0,
          },
          {
            message: "Tentativa de bypass de validação de formulário",
            severity: 1,
          },
          { message: "Múltiplas falhas de autenticação", severity: 1 },
          { message: "Padrão suspeito de navegação detectado", severity: 1 },
          { message: "Requisições com cabeçalhos manipulados", severity: 1 },
          { message: "Uso de VPN detectado durante apostas", severity: 2 },
          {
            message: "Múltiplos logins de localizações diferentes",
            severity: 2,
          },
          { message: "Alteração rápida de endereço IP", severity: 2 },
        ];

        const now = new Date();
        const logs = [];

        // Gerar 20 logs aleatórios
        for (let i = 0; i < 20; i++) {
          const eventTime = new Date(
            now.getTime() - Math.floor(Math.random() * 24 * 60 * 60 * 1000)
          );
          const eventIndex = Math.floor(Math.random() * eventMessages.length);
          const event = eventMessages[eventIndex];
          const logType = logTypes[event.severity];

          logs.push({
            id: `LOG${String(i + 1).padStart(5, "0")}`,
            timestamp: eventTime.toISOString(),
            formattedTime: eventTime.toLocaleTimeString("pt-BR"),
            formattedDate: eventTime.toLocaleDateString("pt-BR"),
            type: logType.type,
            typeColor: logType.color,
            message: event.message,
            ipAddress:
              ipAddresses[Math.floor(Math.random() * ipAddresses.length)],
            userId: `user${Math.floor(Math.random() * 1000) + 1}`,
            details: {
              userAgent:
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
              endpoint: event.message.includes("API")
                ? "/api/v1/odds"
                : event.message.includes("aposta")
                ? "/api/v1/bets"
                : "/api/v1/auth",
              requestMethod: event.message.includes("injeção") ? "POST" : "GET",
              responseCode:
                event.severity === 0 ? 403 : event.severity === 1 ? 400 : 200,
              additionalInfo: event.message.includes("DDoS")
                ? "Tráfego bloqueado automaticamente"
                : event.message.includes("injeção")
                ? "Parâmetros maliciosos detectados e sanitizados"
                : "Evento registrado para análise",
            },
          });
        }

        // Ordenar logs por timestamp (mais recentes primeiro)
        return logs.sort(
          (a, b) => new Date(b.timestamp) - new Date(a.timestamp)
        );
      };

      // Gerar estatísticas de exploits
      const stats = {
        totalAttempts: Math.floor(Math.random() * 100) + 150,
        blockedAttempts: Math.floor(Math.random() * 80) + 120,
        vulnerabilitiesDetected: Math.floor(Math.random() * 10) + 5,
        criticalEvents: Math.floor(Math.random() * 15) + 10,
      };

      // Gerar eventos críticos do sistema
      const generateSystemEvents = () => {
        return [
          {
            id: "SYS001",
            timestamp: "2023-04-15T18:23:45",
            event: "Pico de latência durante jogo Barcelona vs Real Madrid",
            impact: "Aumento de 1200% no tempo de resposta",
            duration: "3 minutos e 42 segundos",
            resolution: "Auto-recuperação após bloqueio de IPs suspeitos",
            details:
              "Durante o momento crítico do jogo (empate 2x2 aos 87 minutos), detectamos um pico anormal de requisições à API de apostas ao vivo, causando lentidão significativa. O sistema de defesa automático identificou e bloqueou 23 IPs suspeitos.",
          },
          {
            id: "SYS002",
            timestamp: "2023-04-12T14:05:12",
            event: "Manipulação de odds detectada em apostas de tênis",
            impact: "Tentativa de explorar delay na atualização de odds",
            duration: "45 segundos",
            resolution: "Apostas canceladas e conta suspensa",
            details:
              "Usuário tentou explorar uma condição de corrida entre a atualização de odds no backend e frontend durante uma partida de tênis entre Djokovic e Nadal. Sistema detectou a discrepância e bloqueou automaticamente as apostas.",
          },
          {
            id: "SYS003",
            timestamp: "2023-04-08T09:37:28",
            event: "Ataque DDoS coordenado",
            impact: "Degradação de serviço em 40%",
            duration: "17 minutos",
            resolution: "Mitigado pelo sistema de proteção CloudFlare",
            details:
              "Ataque distribuído originado de múltiplas regiões, concentrado na API de pagamentos. Análise posterior identificou padrão consistente com grupos conhecidos de hackers. Nenhum dado foi comprometido.",
          },
        ];
      };

      const responseTimeResult = generateResponseTimeData();

      setResponseTimeData(responseTimeResult.datasets);
      setErrorTypeData(generateErrorTypeData());
      setErrorLogsData(generateSecurityLogs());
      setExploitStats(stats);
      setSystemEvents(generateSystemEvents());
    }, 1000);
  }, [timeRange]);

  const responseTimeOptions = {
    responsive: true,
    plugins: {
      legend: {
        position: "top",
      },
      title: {
        display: true,
        text: "Tempo de Resposta do Sistema vs. Eventos Críticos",
      },
      tooltip: {
        callbacks: {
          label: function (context) {
            return `Tempo de resposta: ${context.parsed.y} ms`;
          },
        },
      },
    },
    scales: {
      x: {
        type: "time",
        time: {
          unit: "hour",
          displayFormats: {
            hour: "HH:mm",
          },
          tooltipFormat: "dd/MM/yyyy HH:mm",
        },
        title: {
          display: true,
          text: "Hora",
        },
        adapters: {
          date: {
            locale: ptBR,
          },
        },
      },
      y: {
        title: {
          display: true,
          text: "Tempo de Resposta (ms)",
        },
        beginAtZero: true,
        suggestedMax: 1500,
      },
    },
    elements: {
      point: {
        radius: function (context) {
          // Destacar pontos de eventos críticos
          const index = context.dataIndex;
          const value = context.dataset.data[index].y;
          return value > 800 ? 6 : 3;
        },
        backgroundColor: function (context) {
          const index = context.dataIndex;
          const value = context.dataset.data[index].y;
          return value > 800
            ? "rgba(255, 99, 132, 1)"
            : "rgba(75, 192, 192, 1)";
        },
      },
    },
    interaction: {
      mode: "nearest",
      axis: "x",
      intersect: false,
    },
  };

  const errorTypeOptions = {
    responsive: true,
    plugins: {
      legend: {
        position: "top",
      },
      title: {
        display: true,
        text: "Ocorrências por Tipo de Exploit",
      },
    },
    scales: {
      y: {
        beginAtZero: true,
        title: {
          display: true,
          text: "Número de Ocorrências",
        },
      },
    },
  };

  const renderCriticalEventMarkers = () => {
    if (!responseTimeData) return null;

    // Aqui renderizaríamos marcadores para eventos críticos
    // Como estamos usando Chart.js que não suporta facilmente anotações personalizadas,
    // vamos mostrar os eventos críticos em uma lista separada
    return (
      <div className="mt-3 space-y-2">
        <h4 className="text-sm font-medium text-gray-700">
          Eventos Críticos Detectados:
        </h4>
        <div className="space-y-1">
          {systemEvents.map((event, index) => (
            <div key={index} className="flex items-start space-x-2 text-sm">
              <span className="inline-block w-2 h-2 mt-1.5 rounded-full bg-red-500"></span>
              <div>
                <p className="font-medium text-red-700">{event.event}</p>
                <p className="text-xs text-gray-500">
                  {new Date(event.timestamp).toLocaleString("pt-BR")} - Impacto:{" "}
                  {event.impact}
                </p>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  };

  return (
    <div className="bg-white p-6 rounded-lg shadow-md mb-8">
      <h2 className="text-xl font-semibold mb-4">
        Exploits Técnicos (Hack / Manipulação)
      </h2>

      {/* Estatísticas de Exploits */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
        <div className="bg-white p-4 rounded-lg border border-gray-200">
          <p className="text-sm text-gray-500">Tentativas de Exploit</p>
          <p className="text-2xl font-bold text-red-600">
            {exploitStats.totalAttempts}
          </p>
          <p className="text-xs text-gray-500">Últimos 30 dias</p>
        </div>
        <div className="bg-white p-4 rounded-lg border border-gray-200">
          <p className="text-sm text-gray-500">Tentativas Bloqueadas</p>
          <p className="text-2xl font-bold text-green-600">
            {exploitStats.blockedAttempts}
          </p>
          <p className="text-xs text-gray-500">
            Taxa de bloqueio:{" "}
            {Math.round(
              (exploitStats.blockedAttempts / exploitStats.totalAttempts) * 100
            )}
            %
          </p>
        </div>
        <div className="bg-white p-4 rounded-lg border border-gray-200">
          <p className="text-sm text-gray-500">Vulnerabilidades</p>
          <p className="text-2xl font-bold text-yellow-600">
            {exploitStats.vulnerabilitiesDetected}
          </p>
          <p className="text-xs text-gray-500">Detectadas e corrigidas</p>
        </div>
        <div className="bg-white p-4 rounded-lg border border-gray-200">
          <p className="text-sm text-gray-500">Eventos Críticos</p>
          <p className="text-2xl font-bold text-purple-600">
            {exploitStats.criticalEvents}
          </p>
          <p className="text-xs text-gray-500">Impacto significativo</p>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        {/* Gráfico de Tempo de Resposta vs. Eventos Críticos */}
        <div className="bg-gray-50 p-4 rounded-lg">
          <h3 className="text-lg font-medium mb-3">
            Tempo de Resposta vs. Eventos Críticos
          </h3>
          {isLoading || !responseTimeData ? (
            <div className="h-80 flex items-center justify-center">
              <div className="animate-pulse text-gray-500">
                Carregando dados...
              </div>
            </div>
          ) : (
            <div className="h-80">
              <Line
                data={{ datasets: responseTimeData }}
                options={responseTimeOptions}
              />
            </div>
          )}
          {renderCriticalEventMarkers()}
          <p className="text-sm text-gray-500 mt-2">
            Picos de latência podem indicar ataques DDoS ou tentativas de
            explorar condições de corrida durante eventos esportivos críticos.
          </p>
        </div>

        {/* Gráfico de Barras de Ocorrência por Tipo de Erro */}
        <div className="bg-white p-4 rounded-lg border border-gray-200">
          <h3 className="text-lg font-medium mb-3">
            Ocorrências por Tipo de Exploit
          </h3>
          {isLoading || !errorTypeData ? (
            <div className="h-80 flex items-center justify-center">
              <div className="animate-pulse text-gray-500">
                Carregando dados...
              </div>
            </div>
          ) : (
            <div className="h-80">
              <Bar data={errorTypeData} options={errorTypeOptions} />
            </div>
          )}
          <p className="text-sm text-gray-500 mt-2">
            Distribuição de tentativas de exploit por tipo, permitindo
            identificar as técnicas mais comuns utilizadas.
          </p>
        </div>
      </div>

      {/* Logs de Eventos de Segurança */}
      <div className="mb-6">
        <h3 className="text-lg font-medium mb-3">
          Logs de Eventos de Segurança
        </h3>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  ID
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Timestamp
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Tipo
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Mensagem
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  IP
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Usuário
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Ações
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {isLoading ? (
                <tr>
                  <td colSpan="7" className="px-6 py-4 text-center">
                    <div className="animate-pulse text-gray-500">
                      Carregando logs...
                    </div>
                  </td>
                </tr>
              ) : (
                errorLogsData &&
                errorLogsData.map((log, index) => (
                  <tr
                    key={log.id}
                    className={index % 2 === 0 ? "bg-white" : "bg-gray-50"}
                  >
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                      {log.id}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      <div>{log.formattedDate}</div>
                      <div className="text-xs">{log.formattedTime}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm">
                      <span
                        className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${log.typeColor}`}
                      >
                        {log.type}
                      </span>
                    </td>
                    <td className="px-6 py-4 text-sm text-gray-500">
                      <span
                        className={`cursor-pointer hover:text-blue-600 ${
                          selectedLog?.id === log.id
                            ? "font-semibold text-blue-600"
                            : ""
                        }`}
                        onClick={() => setSelectedLog(log)}
                      >
                        {log.message}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {log.ipAddress}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {log.userId}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      <button
                        className="text-blue-600 hover:text-blue-900 mr-3"
                        onClick={() => setSelectedLog(log)}
                      >
                        Detalhes
                      </button>
                      <button className="text-red-600 hover:text-red-900">
                        Bloquear IP
                      </button>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>

      {/* Detalhes do Log Selecionado */}
      {selectedLog && (
        <div className="mt-6 bg-blue-50 p-4 rounded-lg border border-blue-200">
          <div className="flex justify-between items-start mb-3">
            <h3 className="text-md font-medium text-blue-800">
              Detalhes do Log: {selectedLog.id}
            </h3>
            <button
              className="text-blue-600 hover:text-blue-800 text-sm"
              onClick={() => setSelectedLog(null)}
            >
              Fechar
            </button>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="bg-white p-3 rounded shadow-sm">
              <h4 className="text-sm font-medium text-gray-700 mb-2">
                Informações Básicas
              </h4>
              <p className="text-xs text-gray-600 mb-1">
                Timestamp:{" "}
                <span className="font-medium">
                  {new Date(selectedLog.timestamp).toLocaleString("pt-BR")}
                </span>
              </p>
              <p className="text-xs text-gray-600 mb-1">
                Tipo:{" "}
                <span
                  className={`inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${selectedLog.typeColor}`}
                >
                  {selectedLog.type}
                </span>
              </p>
              <p className="text-xs text-gray-600 mb-1">
                Mensagem:{" "}
                <span className="font-medium">{selectedLog.message}</span>
              </p>
              <p className="text-xs text-gray-600 mb-1">
                IP: <span className="font-medium">{selectedLog.ipAddress}</span>
              </p>
              <p className="text-xs text-gray-600">
                Usuário:{" "}
                <span className="font-medium">{selectedLog.userId}</span>
              </p>
            </div>
            <div className="bg-white p-3 rounded shadow-sm">
              <h4 className="text-sm font-medium text-gray-700 mb-2">
                Detalhes Técnicos
              </h4>
              <p className="text-xs text-gray-600 mb-1">
                User Agent:{" "}
                <span className="font-medium">
                  {selectedLog.details.userAgent}
                </span>
              </p>
              <p className="text-xs text-gray-600 mb-1">
                Endpoint:{" "}
                <span className="font-medium">
                  {selectedLog.details.endpoint}
                </span>
              </p>
              <p className="text-xs text-gray-600 mb-1">
                Método:{" "}
                <span className="font-medium">
                  {selectedLog.details.requestMethod}
                </span>
              </p>
              <p className="text-xs text-gray-600 mb-1">
                Código de Resposta:{" "}
                <span className="font-medium">
                  {selectedLog.details.responseCode}
                </span>
              </p>
              <p className="text-xs text-gray-600">
                Informações Adicionais:{" "}
                <span className="font-medium">
                  {selectedLog.details.additionalInfo}
                </span>
              </p>
            </div>
          </div>
          <div className="mt-4 flex justify-end space-x-3">
            <button className="px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700">
              Investigar
            </button>
            <button className="px-3 py-1 bg-yellow-600 text-white text-sm rounded hover:bg-yellow-700">
              Marcar como revisado
            </button>
            <button className="px-3 py-1 bg-red-600 text-white text-sm rounded hover:bg-red-700">
              Bloquear IP
            </button>
          </div>
        </div>
      )}

      {/* Eventos Críticos do Sistema */}
      <div className="mt-6 bg-gray-50 p-4 rounded-lg">
        <h3 className="text-md font-medium text-gray-800 mb-3">
          Eventos Críticos do Sistema
        </h3>
        <div className="space-y-4">
          {systemEvents.map((event) => (
            <div
              key={event.id}
              className="bg-white p-3 rounded border border-gray-200"
            >
              <div className="flex justify-between">
                <h4 className="font-medium text-gray-800">{event.event}</h4>
                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                  {event.id}
                </span>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-2 mt-2 text-sm">
                <p className="text-gray-600">
                  <span className="font-medium">Timestamp:</span>{" "}
                  {new Date(event.timestamp).toLocaleString("pt-BR")}
                </p>
                <p className="text-gray-600">
                  <span className="font-medium">Impacto:</span> {event.impact}
                </p>
                <p className="text-gray-600">
                  <span className="font-medium">Duração:</span> {event.duration}
                </p>
              </div>
              <p className="text-sm text-gray-600 mt-2">
                <span className="font-medium">Resolução:</span>{" "}
                {event.resolution}
              </p>
              <p className="text-sm text-gray-600 mt-2">{event.details}</p>
              <div className="mt-2 flex justify-end">
                <button className="text-blue-600 hover:text-blue-800 text-sm">
                  Ver relatório completo
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Padrões de Ataque Comuns */}
      <div className="mt-6 bg-indigo-50 p-4 rounded-lg border border-indigo-200">
        <h3 className="text-md font-medium text-indigo-800 mb-2">
          Padrões de Ataque Comuns
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="bg-white p-3 rounded shadow-sm">
            <h4 className="text-sm font-medium text-indigo-700 mb-2">
              Manipulação de Odds
            </h4>
            <ul className="text-xs text-gray-600 space-y-1 list-disc list-inside">
              <li>Exploração de delays na atualização de odds</li>
              <li>
                Tentativas de apostas durante períodos de alta volatilidade
              </li>
              <li>Uso de scripts automatizados para detectar discrepâncias</li>
              <li>Apostas coordenadas entre múltiplas contas</li>
            </ul>
          </div>
          <div className="bg-white p-3 rounded shadow-sm">
            <h4 className="text-sm font-medium text-indigo-700 mb-2">
              Ataques de Infraestrutura
            </h4>
            <ul className="text-xs text-gray-600 space-y-1 list-disc list-inside">
              <li>DDoS durante eventos esportivos de alto perfil</li>
              <li>Tentativas de injeção SQL em formulários de aposta</li>
              <li>Manipulação de parâmetros de API para alterar valores</li>
              <li>Tentativas de bypass de validações de segurança</li>
            </ul>
          </div>
        </div>
      </div>

      {/* Medidas de Mitigação */}
      <div className="mt-6 bg-white p-4 rounded-lg border border-gray-200">
        <h3 className="text-lg font-medium mb-3">
          Medidas de Mitigação Implementadas
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="border-l-4 border-blue-500 pl-3 py-2">
            <h4 className="font-medium text-gray-900 mb-1">Proteção DDoS</h4>
            <p className="text-sm text-gray-600">
              Sistema de proteção CloudFlare com regras personalizadas para
              tráfego de apostas, reduzindo em 98% os ataques de negação de
              serviço.
            </p>
          </div>
          <div className="border-l-4 border-purple-500 pl-3 py-2">
            <h4 className="font-medium text-gray-900 mb-1">
              Validação de Apostas
            </h4>
            <p className="text-sm text-gray-600">
              Verificação em duas camadas para apostas, com validação de
              timestamp e hash para prevenir manipulação de odds e condições de
              corrida.
            </p>
          </div>
          <div className="border-l-4 border-green-500 pl-3 py-2">
            <h4 className="font-medium text-gray-900 mb-1">
              Monitoramento em Tempo Real
            </h4>
            <p className="text-sm text-gray-600">
              Sistema de detecção de anomalias baseado em ML que identifica
              padrões suspeitos de tráfego e comportamento de apostas em tempo
              real.
            </p>
          </div>
        </div>
      </div>

      {/* Recomendações de Segurança */}
      <div className="mt-6 bg-yellow-50 p-4 rounded-lg border border-yellow-200">
        <h3 className="text-md font-medium text-yellow-800 mb-3">
          Recomendações de Segurança
        </h3>
        <div className="space-y-2">
          <div className="flex items-start space-x-2">
            <span className="inline-block w-5 h-5 mt-0.5 text-center rounded-full bg-yellow-500 text-white font-bold">
              1
            </span>
            <div>
              <p className="font-medium text-gray-800">
                Implementar rate limiting mais restritivo
              </p>
              <p className="text-sm text-gray-600">
                Limitar o número de requisições por IP/usuário, especialmente
                durante eventos esportivos de alto perfil.
              </p>
            </div>
          </div>
          <div className="flex items-start space-x-2">
            <span className="inline-block w-5 h-5 mt-0.5 text-center rounded-full bg-yellow-500 text-white font-bold">
              2
            </span>
            <div>
              <p className="font-medium text-gray-800">
                Atualizar mecanismos de validação de apostas
              </p>
              <p className="text-sm text-gray-600">
                Adicionar verificações adicionais para apostas feitas durante
                períodos de alta volatilidade de odds.
              </p>
            </div>
          </div>
          <div className="flex items-start space-x-2">
            <span className="inline-block w-5 h-5 mt-0.5 text-center rounded-full bg-yellow-500 text-white font-bold">
              3
            </span>
            <div>
              <p className="font-medium text-gray-800">
                Implementar autenticação multi-fator para operações sensíveis
              </p>
              <p className="text-sm text-gray-600">
                Exigir verificação adicional para apostas de alto valor ou
                padrões incomuns de apostas.
              </p>
            </div>
          </div>
        </div>
      </div>

      <div className="mt-6 flex justify-end">
        <button className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 mr-3">
          Exportar Relatório
        </button>
        <button className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500">
          Configurar Alertas
        </button>
      </div>
    </div>
  );
};

export default TechnicalExploitsSection;
